from datetime import datetime

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message

from services.consultations import consultations
from states.create_consultation import CreateConsultationFSM
from utils.auth_utils import ensure_auth
from utils.consultations_utils import format_date_verbose

router = Router()


@router.callback_query(F.data == "teacher_create_consultation")
async def start_create_consultation(callback: CallbackQuery, state: FSMContext):
    telegram_id = callback.from_user.id
    role = await ensure_auth(telegram_id, callback)
    if role != "teacher":
        await callback.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.", show_alert=True)
        return

    await state.clear()
    await state.set_state(CreateConsultationFSM.waiting_for_title)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ üëá")
    await callback.answer()


@router.message(CreateConsultationFSM.waiting_for_title)
async def handle_consultation_title(message: Message, state: FSMContext):
    title = (message.text or "").strip()
    if not title:
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.")
        return

    await state.update_data(title=title)
    await state.set_state(CreateConsultationFSM.waiting_for_date)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 16-10-2025) üëá")


@router.message(CreateConsultationFSM.waiting_for_date)
async def handle_consultation_date(message: Message, state: FSMContext):
    date_input = (message.text or "").strip()
    try:
        dt = datetime.strptime(date_input, "%d-%m-%Y")
        if dt.date() < datetime.now().date():
            await message.answer("‚ùó –î–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –±—É–¥—É—â—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì.")
            return
    except ValueError:
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∫–∞–∫ –î–î-–ú–ú-–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 16-10-2025).")
        return

    date_iso = dt.strftime("%Y-%m-%d")
    await state.update_data(date=date_iso)
    await state.set_state(CreateConsultationFSM.waiting_for_start_time)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:00) üëá")


def _parse_time(value: str) -> datetime | None:
    try:
        return datetime.strptime(value.strip(), "%H:%M")
    except Exception:
        return None


@router.message(CreateConsultationFSM.waiting_for_start_time)
async def handle_consultation_start_time(message: Message, state: FSMContext):
    start_time = (message.text or "").strip()
    start_dt = _parse_time(start_time)
    if not start_dt:
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∫–∞–∫ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:00).")
        return

    await state.update_data(start_time=start_time)
    await state.set_state(CreateConsultationFSM.waiting_for_end_time)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 11:00) üëá")


@router.message(CreateConsultationFSM.waiting_for_end_time)
async def handle_consultation_end_time(message: Message, state: FSMContext):
    end_time = (message.text or "").strip()
    end_dt = _parse_time(end_time)
    data = await state.get_data()
    start_time = data.get("start_time")
    start_dt = _parse_time(start_time) if start_time else None

    if not end_dt or not start_dt:
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫–∞–∫ –ß–ß:–ú–ú.")
        return

    if end_dt <= start_dt:
        await message.answer("‚ùó –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞ (–ß–ß:–ú–ú).")
        return

    await state.update_data(end_time=end_time)
    await state.set_state(CreateConsultationFSM.waiting_for_max_students)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100) üëá")


@router.message(CreateConsultationFSM.waiting_for_max_students)
async def handle_consultation_max_students(message: Message, state: FSMContext):
    text = (message.text or "").strip()
    if not text.isdigit():
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100.")
        return
    value = int(text)
    if not (1 <= value <= 100):
        await message.answer("‚ùó –ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 1‚Äì100. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await state.update_data(max_students=value)
    data = await state.get_data()

    summary = (
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:\n\n"
        f"üìå –¢–µ–º–∞: {data['title']}\n"
        f"üìÖ –î–∞—Ç–∞: {format_date_verbose(data['date'])}\n"
        f"‚è∞ –í—Ä–µ–º—è: {data['start_time']}‚Äì{data['end_time']}\n"
        f"üë• –õ–∏–º–∏—Ç –º–µ—Å—Ç: {data['max_students']}\n\n"
        "–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é?"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_create_consultation")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_create_consultation")]
    ])

    await state.set_state(CreateConsultationFSM.confirming)
    await message.answer(summary, reply_markup=keyboard)


@router.callback_query(F.data == "cancel_create_consultation")
async def cancel_create_consultation(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.answer()


@router.callback_query(F.data == "confirm_create_consultation")
async def confirm_create_consultation(callback: CallbackQuery, state: FSMContext):
    telegram_id = callback.from_user.id
    role = await ensure_auth(telegram_id, callback)
    if role != "teacher":
        await callback.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.", show_alert=True)
        return

    data = await state.get_data()
    title = data.get("title")
    date = data.get("date")
    start_time = data.get("start_time")
    end_time = data.get("end_time")
    max_students = data.get("max_students")

    result = await consultations.create_consultation(
        telegram_id=telegram_id,
        title=title,
        date=date,
        start_time=start_time,
        end_time=end_time,
        max_students=max_students
    )

    if result:
        await callback.message.edit_text("‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
    else:
        await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await state.clear()
    await callback.answer()
