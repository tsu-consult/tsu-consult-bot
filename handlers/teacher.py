from datetime import datetime

from aiogram import Router, F
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message

from handlers.student_and_teacher import show_requests_page
from keyboards.main_keyboard import show_main_menu
from services.consultations import consultations
from states.create_consultation import CreateConsultationFSM
from utils.auth_utils import ensure_auth
from utils.consultations_utils import format_date_verbose
from utils.messages import answer_and_delete
import asyncio

router = Router()

PAGE_SIZE = 3


async def show_cancel_page(callback: CallbackQuery, telegram_id: int, page: int):
    page_data = await consultations.get_consultations(telegram_id, page=page, page_size=PAGE_SIZE, is_closed=False)
    results = page_data.get("results", [])
    current_page = page_data.get("current_page", page)
    total_pages = max(page_data.get("total_pages", 1), 1)

    text = f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å üëá\n\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page} –∏–∑ {total_pages}"

    keyboard_rows: list[list[InlineKeyboardButton]] = []
    for c in results:
        title = c.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        date_iso = c.get("date")
        date_human = format_date_verbose(date_iso) if date_iso else "‚Äî"
        keyboard_rows.append([
            InlineKeyboardButton(
                text=f"{title} ({date_human})",
                callback_data=f"teacher_choose_cancel_{c['id']}_{current_page}"
            )
        ])

    nav_row = []
    if current_page > 1:
        nav_row.append(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"teacher_cancel_consultation_{current_page - 1}"
        ))
    if current_page < total_pages:
        nav_row.append(InlineKeyboardButton(
            text="‚û°Ô∏è –í–ø–µ—Ä—ë–¥",
            callback_data=f"teacher_cancel_consultation_{current_page + 1}"
        ))
    if nav_row:
        keyboard_rows.append(nav_row)

    keyboard_rows.append([InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")])

    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)

    try:
        await callback.message.edit_text(text, reply_markup=keyboard)
    except TelegramBadRequest:
        await callback.message.answer(text, reply_markup=keyboard)


@router.callback_query(F.data == "teacher_cancel_consultation")
async def teacher_start_cancel_consultation(callback: CallbackQuery):
    telegram_id = callback.from_user.id
    role = await ensure_auth(telegram_id, callback)
    if role != "teacher":
        await callback.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.", show_alert=True)
        return

    await show_cancel_page(callback, telegram_id, page=1)
    await callback.answer()


@router.callback_query(F.data.regexp(r"^teacher_cancel_consultation_(\d+)$"))
async def teacher_cancel_consultation_paginate(callback: CallbackQuery):
    telegram_id = callback.from_user.id
    role = await ensure_auth(telegram_id, callback)
    if role != "teacher":
        await callback.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.", show_alert=True)
        return

    page = int(callback.data.split("_")[-1])
    await show_cancel_page(callback, telegram_id, page=page)
    await callback.answer()


@router.callback_query(F.data.regexp(r"^teacher_choose_cancel_(\d+)_(\d+)$"))
async def teacher_choose_cancel(callback: CallbackQuery):
    telegram_id = callback.from_user.id
    role = await ensure_auth(telegram_id, callback)
    if role != "teacher":
        await callback.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.", show_alert=True)
        return

    parts = callback.data.split("_")
    consultation_id = int(parts[-2])
    page = int(parts[-1])

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–º–µ–Ω—É", callback_data=f"teacher_confirm_cancel_{consultation_id}_{page}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"teacher_cancel_consultation_{page}")]
    ])

    try:
        await callback.message.edit_text(
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é?",
            reply_markup=keyboard
        )
    except TelegramBadRequest:
        await callback.message.answer(
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é?",
            reply_markup=keyboard
        )
    await callback.answer()


@router.callback_query(F.data.regexp(r"^teacher_confirm_cancel_(\d+)_(\d+)$"))
async def teacher_confirm_cancel(callback: CallbackQuery, state: FSMContext):
    telegram_id = callback.from_user.id
    role = await ensure_auth(telegram_id, callback)
    if role != "teacher":
        await callback.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.", show_alert=True)
        return

    parts = callback.data.split("_")
    consultation_id = int(parts[-2])
    page = int(parts[-1])

    result = await consultations.cancel_consultation(telegram_id, consultation_id)

    if result == "success":
        await callback.message.edit_text("‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await show_main_menu(callback, role)
    else:
        await asyncio.sleep(0)
        await show_cancel_page(callback, telegram_id, page=page)
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        return

    await state.clear()
    await callback.answer()


@router.callback_query(F.data == "teacher_create_consultation")
async def start_create_consultation(callback: CallbackQuery, state: FSMContext):
    telegram_id = callback.from_user.id
    role = await ensure_auth(telegram_id, callback)
    if role != "teacher":
        await callback.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.", show_alert=True)
        return

    await state.clear()
    await state.set_state(CreateConsultationFSM.waiting_for_title)

    try:
        await callback.message.delete()
    except TelegramBadRequest:
        pass

    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ üëá")
    await callback.answer()


@router.message(CreateConsultationFSM.waiting_for_title)
async def handle_consultation_title(message: Message, state: FSMContext):
    title = (message.text or "").strip()
    if not title:
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.")
        return

    await state.update_data(title=title)
    await state.set_state(CreateConsultationFSM.waiting_for_date)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 16-10-2025) üëá")


@router.message(CreateConsultationFSM.waiting_for_date)
async def handle_consultation_date(message: Message, state: FSMContext):
    date_input = (message.text or "").strip()
    try:
        dt = datetime.strptime(date_input, "%d-%m-%Y")
        if dt.date() < datetime.now().date():
            await message.answer("‚ùó –î–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –±—É–¥—É—â—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì.")
            return
    except ValueError:
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∫–∞–∫ –î–î-–ú–ú-–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 16-10-2025).")
        return

    date_iso = dt.strftime("%Y-%m-%d")
    await state.update_data(date=date_iso)
    await state.set_state(CreateConsultationFSM.waiting_for_start_time)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:00) üëá")


def _parse_time(value: str) -> datetime | None:
    try:
        return datetime.strptime(value.strip(), "%H:%M")
    except ValueError:
        return None


@router.message(CreateConsultationFSM.waiting_for_start_time)
async def handle_consultation_start_time(message: Message, state: FSMContext):
    start_time = (message.text or "").strip()
    start_dt = _parse_time(start_time)
    if not start_dt:
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∫–∞–∫ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:00).")
        return

    await state.update_data(start_time=start_time)
    await state.set_state(CreateConsultationFSM.waiting_for_end_time)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 11:00) üëá")


@router.message(CreateConsultationFSM.waiting_for_end_time)
async def handle_consultation_end_time(message: Message, state: FSMContext):
    end_time = (message.text or "").strip()
    end_dt = _parse_time(end_time)
    data = await state.get_data()
    start_time = data.get("start_time")
    start_dt = _parse_time(start_time) if start_time else None

    if not end_dt or not start_dt:
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫–∞–∫ –ß–ß:–ú–ú.")
        return

    if end_dt <= start_dt:
        await message.answer("‚ùó –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞ (–ß–ß:–ú–ú).")
        return

    await state.update_data(end_time=end_time)
    await state.set_state(CreateConsultationFSM.waiting_for_max_students)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100) üëá")


@router.message(CreateConsultationFSM.waiting_for_max_students)
async def handle_consultation_max_students(message: Message, state: FSMContext):
    text = (message.text or "").strip()
    if not text.isdigit():
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100.")
        return
    value = int(text)
    if not (1 <= value <= 100):
        await message.answer("‚ùó –ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 1‚Äì100. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await state.update_data(max_students=value)
    data = await state.get_data()

    summary = (
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:\n\n"
        f"üìå –¢–µ–º–∞: {data['title']}\n"
        f"üìÖ –î–∞—Ç–∞: {format_date_verbose(data['date'])}\n"
        f"‚è∞ –í—Ä–µ–º—è: {data['start_time']}‚Äì{data['end_time']}\n"
        f"üë• –õ–∏–º–∏—Ç –º–µ—Å—Ç: {data['max_students']}\n\n"
        "–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é?"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_create_consultation")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_create_consultation")]
    ])

    await state.set_state(CreateConsultationFSM.confirming)
    await message.answer(summary, reply_markup=keyboard)


@router.callback_query(F.data == "cancel_create_consultation")
async def cancel_create_consultation(callback: CallbackQuery, state: FSMContext):
    telegram_id = callback.from_user.id
    role = await ensure_auth(telegram_id, callback)
    await state.clear()

    try:
        await callback.message.delete()
    except TelegramBadRequest:
        pass

    asyncio.create_task(answer_and_delete(callback.message, "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", delay=5))

    await show_main_menu(callback, role)
    await callback.answer()


@router.callback_query(F.data == "confirm_create_consultation")
async def confirm_create_consultation(callback: CallbackQuery, state: FSMContext):
    telegram_id = callback.from_user.id
    role = await ensure_auth(telegram_id, callback)
    if role != "teacher":
        await callback.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.", show_alert=True)
        return

    data = await state.get_data()
    title = data.get("title")
    date = data.get("date")
    start_time = data.get("start_time")
    end_time = data.get("end_time")
    max_students = data.get("max_students")

    source_request_id = data.get("source_request_id")
    if source_request_id:
        result = await consultations.create_consultation_from_request(
            telegram_id=telegram_id,
            request_id=source_request_id,
            title=title,
            date=date,
            start_time=start_time,
            end_time=end_time,
            max_students=max_students
        )
    else:
        result = await consultations.create_consultation(
            telegram_id=telegram_id,
            title=title,
            date=date,
            start_time=start_time,
            end_time=end_time,
            max_students=max_students
        )

    if result:
        await callback.message.edit_text("‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
        await show_main_menu(callback, role)
    else:
        await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await state.clear()
    await callback.answer()


async def show_close_page(callback: CallbackQuery, telegram_id: int, page: int):
    page_data = await consultations.get_consultations(telegram_id, page=page, page_size=PAGE_SIZE, is_closed=False)
    results = page_data.get("results", [])
    current_page = page_data.get("current_page", page)
    total_pages = max(page_data.get("total_pages", 1), 1)

    text = f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –¥–ª—è –∑–∞–ø–∏—Å–∏ üëá\n\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page} –∏–∑ {total_pages}"

    keyboard_rows: list[list[InlineKeyboardButton]] = []
    for c in results:
        title = c.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        date_iso = c.get("date")
        date_human = format_date_verbose(date_iso) if date_iso else "‚Äî"
        keyboard_rows.append([
            InlineKeyboardButton(
                text=f"{title} ({date_human})",
                callback_data=f"teacher_choose_close_{c['id']}_{current_page}"
            )
        ])

    nav_row = []
    if current_page > 1:
        nav_row.append(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"teacher_close_consultation_{current_page - 1}"
        ))
    if current_page < total_pages:
        nav_row.append(InlineKeyboardButton(
            text="‚û°Ô∏è –í–ø–µ—Ä—ë–¥",
            callback_data=f"teacher_close_consultation_{current_page + 1}"
        ))
    if nav_row:
        keyboard_rows.append(nav_row)

    keyboard_rows.append([InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")])

    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)

    try:
        await callback.message.edit_text(text, reply_markup=keyboard)
    except TelegramBadRequest:
        await callback.message.answer(text, reply_markup=keyboard)


@router.callback_query(F.data == "teacher_close_consultation")
async def teacher_start_close_consultation(callback: CallbackQuery):
    telegram_id = callback.from_user.id
    role = await ensure_auth(telegram_id, callback)
    if role != "teacher":
        await callback.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.", show_alert=True)
        return

    await show_close_page(callback, telegram_id, page=1)
    await callback.answer()


@router.callback_query(F.data.regexp(r"^teacher_close_consultation_(\d+)$"))
async def teacher_close_consultation_paginate(callback: CallbackQuery):
    telegram_id = callback.from_user.id
    role = await ensure_auth(telegram_id, callback)
    if role != "teacher":
        await callback.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.", show_alert=True)
        return

    page = int(callback.data.split("_")[-1])
    await show_close_page(callback, telegram_id, page=page)
    await callback.answer()


@router.callback_query(F.data.regexp(r"^teacher_choose_close_(\d+)_(\d+)$"))
async def teacher_choose_close(callback: CallbackQuery):
    telegram_id = callback.from_user.id
    role = await ensure_auth(telegram_id, callback)
    if role != "teacher":
        await callback.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.", show_alert=True)
        return

    parts = callback.data.split("_")
    consultation_id = int(parts[-2])
    page = int(parts[-1])

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîí –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫—Ä—ã—Ç–∏–µ", callback_data=f"teacher_confirm_close_{consultation_id}_{page}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"teacher_close_consultation_{page}")],
    ])

    try:
        await callback.message.edit_text(
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ —ç—Ç—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é?",
            reply_markup=keyboard
        )
    except TelegramBadRequest:
        await callback.message.answer(
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ —ç—Ç—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é?",
            reply_markup=keyboard
        )
    await callback.answer()


@router.callback_query(F.data.regexp(r"^teacher_confirm_close_(\d+)_(\d+)$"))
async def teacher_confirm_close(callback: CallbackQuery):
    telegram_id = callback.from_user.id
    role = await ensure_auth(telegram_id, callback)
    if role != "teacher":
        await callback.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.", show_alert=True)
        return

    parts = callback.data.split("_")
    consultation_id = int(parts[-2])
    page = int(parts[-1])

    result = await consultations.close_consultation(telegram_id, consultation_id)

    if result == "success":
        await callback.message.edit_text("üîí –ó–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∑–∞–∫—Ä—ã—Ç–∞.")
        await show_main_menu(callback, role)
    else:
        await show_close_page(callback, telegram_id, page=page)
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –∑–∞–ø–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        return

    await callback.answer()

@router.callback_query(F.data == "teacher_requests")
async def teacher_view_requests(callback: CallbackQuery):
    telegram_id = callback.from_user.id
    role = await ensure_auth(telegram_id, callback)
    if role != "teacher":
        await callback.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.", show_alert=True)
        return

    await show_requests_page(callback, telegram_id, role, page=1)